# 新人エンジニア 日次作業管理チートシート

## 📅 1日のタイムライン

```
09:00 ────────────────────────────────────────────────────────── 出勤
  ↓
09:00-09:30 【朝の準備】
  ↓
09:30-10:00 【朝会】← このシートを使って報告
  ↓
10:00-12:00 【午前作業】
  ↓
12:00-13:00 【ランチ】
  ↓
13:00-15:00 【午後作業】
  ↓
15:00-15:30 【中間確認】← 進捗チェック
  ↓
15:30-17:30 【夕方作業】
  ↓
17:30-18:00 【退勤前】← 日報作成・明日の準備
  ↓
18:00 ────────────────────────────────────────────────────────── 退勤
```

---

## 🌅 朝会(9:30-10:00)

### 報告テンプレート

```markdown
## 朝会報告 [名前] 2025/10/18(金)

### ①昨日やったこと
✅ [完了] ログイン画面のUI実装 (見積3h / 実績4h)
✅ [完了] PR #123 のレビュー対応 (見積1h / 実績1.5h)
🔄 [進行中] ユーザー一覧API実装 (進捗60%)

### ②今日やること
【メイン】ユーザー一覧API実装の完了 (残2h予定)
【サブ】テストコード作成 (2h予定)
【その他】週次MTG参加 (1h)

### ③ブロッカー・相談事項
⚠️ 認証トークンの保存方法について相談したい
→ 午後に○○さんに相談予定
```

### 朝会で伝えるべきこと

| 項目 | 内容 | 時間 |
|-----|------|-----|
| 昨日の実績 | 完了したタスク(実績時間も) | 30秒 |
| 今日の予定 | メイン・サブタスクの優先順位 | 30秒 |
| 困りごと | ブロッカー・相談事項 | 30秒 |

**ポイント**:
- 簡潔に(1分以内)
- 数字で具体的に(進捗60%、残2h等)
- 困っていることは隠さない

---

## 🕐 中間確認(15:00-15:30)

### セルフチェック項目

```markdown
## 中間確認チェックリスト

### 進捗確認
- [ ] 午前のタスクは予定通り進んだ？
- [ ] 午後のタスクは開始できた？
- [ ] 予定より遅れているタスクはある？

### 時間管理
- [ ] 見積時間と実績時間のズレを確認
- [ ] 残業になりそうか判断
- [ ] 明日に回すタスクの洗い出し

### コミュニケーション
- [ ] 質問・相談すべきことを整理
- [ ] 先輩の手が空くタイミングを確認
- [ ] ブロッカーを解消できたか

### やること
1. タスク管理表を更新
2. 遅れている場合は先輩に相談
3. 午後の作業優先度を再調整
```

### 先輩への相談タイミング

**良いタイミング**:
- ✅ 15:00-16:00 (午後の余裕がある時間)
- ✅ ランチ後 (13:00-14:00)
- ✅ 朝会直後 (10:00-10:30)

**避けるべきタイミング**:
- ❌ MTG直前
- ❌ 締切直前で忙しそうな時
- ❌ ランチ直前

**相談の切り出し方**:
```
お疲れ様です。
◯◯の実装で詰まっているのですが、
今30分ほどお時間いただけますか？

難しければ今日中の都合の良い時間を教えてください。
```

---

## 🌙 退勤前(17:30-18:00)

### 日報作成テンプレート

```markdown
## 【日報】2025/10/18(金) [名前]

### ✅ 今日完了したこと
1. ユーザー一覧API実装完了
   - 見積: 5h / 実績: 6h
   - PR作成済み: #125
   
2. テストコード作成(80%完了)
   - 見積: 2h / 実績: 2h
   - 残り: エッジケーステスト

3. 週次MTG参加
   - 実績: 1h

### 🔄 進行中・持ち越し
- テストコード完成(残20% → 明日0.5h)
- PR #125 のレビュー待ち

### 📝 明日やること
【最優先】テストコード完成 (0.5h)
【メイン】PR #125 レビュー対応 (2h想定)
【サブ】新規タスク着手

### 💡 学んだこと・気づき
- API設計で考慮すべきエラーハンドリングのパターン
- テストコードのカバレッジを意識する重要性

### ❓ 相談事項・困っていること
- テストのモックデータの作り方がわからず時間がかかった
  → 明日○○さんに相談予定

### ⏰ 稼働時間
- 実働: 8h (9:00-18:00, 休憩1h)
- 作業内訳: 実装6h / MTG1h / レビュー1h
```

### 退勤前のチェックリスト

```markdown
- [ ] 今日のタスクの進捗を記録
- [ ] 明日のタスクをリストアップ
- [ ] 未完了タスクの理由を分析
- [ ] コミット・プッシュ済みか確認
- [ ] 作業中のファイルを保存
- [ ] 日報をSlackに投稿
- [ ] カレンダーで明日の予定確認
- [ ] PCをシャットダウン
- [ ] デスク整理
- [ ] 勤怠打刻
```

---

## 📊 タスク管理表(日次)

### 基本フォーマット

| タスク名 | 重要度 | 緊急度 | 見積 | 実績 | 残 | 状態 | デッドライン | メモ |
|---------|-------|-------|-----|-----|---|-----|------------|-----|
| ユーザーAPI実装 | ★★★ | 高 | 5h | 6h | 0h | ✅完了 | 10/18 | PR#125 |
| テストコード作成 | ★★☆ | 中 | 2h | 2h | 0.5h | 🔄進行中 | 10/19 | 80%完了 |
| 設計レビュー参加 | ★☆☆ | 低 | 1h | 1h | 0h | ✅完了 | 10/18 | - |

### 記号の意味

**状態**:
- 📝 **未着手**: まだ開始していない
- 🔄 **進行中**: 作業中
- ⏸️ **保留中**: ブロッカーで停止
- 👀 **レビュー待ち**: PRを出して待機
- ✅ **完了**: 完全に終了
- ❌ **中止**: キャンセルされた

**重要度**:
- ★★★ **高**: ビジネスインパクト大
- ★★☆ **中**: 通常の優先度
- ★☆☆ **低**: 後回し可能

**緊急度**:
- 🔴 **高**: 今日中必須
- 🟡 **中**: 今週中
- 🟢 **低**: 急がない

---

## 🎯 優先順位マトリクス(アイゼンハワーマトリクス)

```
        重要度 →
      ┌─────────┬─────────┐
緊    │  第1象限  │  第2象限  │
急  高│ すぐやる │ 計画する  │
度    │         │         │
↓    ├─────────┼─────────┤
      │  第3象限  │  第4象限  │
    低│ 人に頼む │ やらない  │
      │         │         │
      └─────────┴─────────┘
        低        高
```

### 各象限の具体例

**第1象限(重要＋緊急)** - すぐやる
- 🔥 本番バグの緊急修正
- ⏰ 今日締切のタスク
- 🚨 お客様からのクリティカルな問い合わせ

**第2象限(重要＋緊急でない)** - 計画的に
- 📚 技術学習
- 🏗️ リファクタリング
- 📝 ドキュメント整備
- 🎯 中長期的な改善

**第3象限(重要でない＋緊急)** - 可能なら委譲
- 📧 一部のメール返信
- 📞 急ぎだが簡単な問い合わせ
- 🔄 定型的な作業

**第4象限(重要でない＋緊急でない)** - やらない
- 📱 無駄なSNSチェック
- ☕ 長すぎる雑談
- 🎮 業務と関係ない作業

---

## 👨‍🏫 先輩へのやること・相談リスト

### 相談準備シート

```markdown
## 相談シート

### 相談内容
ユーザー認証のトークン保存方法について

### 背景・状況
- ログイン機能を実装中
- トークンの保存場所で悩んでいる
- LocalStorageとCookieのどちらが適切か判断できない

### 自分で調べたこと
- LocalStorage: XSS脆弱性のリスクあり
- Cookie: httpOnly設定でセキュア
- 公式ドキュメント: 明確な推奨なし

### 質問
1. 当プロジェクトではどちらを使うべきか？
2. セキュリティ面で他に考慮すべき点は？

### 希望する回答
- どちらを選ぶべきか決定
- 実装時の注意点

### 相談可能時間
- 今日15:00以降
- または明日午前中
```

### 先輩に依頼する時のテンプレート

**レビュー依頼**:
```
お疲れ様です。
ログイン機能のPRを作成しました。

PR: #125
変更内容: ログインフォーム実装
確認ポイント: バリデーションロジック

お手すきの際にレビューをお願いできますでしょうか？
できれば明日中にいただけると助かります🙏
```

**質問**:
```
お疲れ様です。
◯◯の実装で詰まっています。

【やりたいこと】
xxx

【試したこと】
- aaa
- bbb

【エラー】
(コードやスクリーンショット)

お手すきの際にアドバイスいただけますか？
```

---

## ⏱️ 時間管理のコツ

### 見積もりの立て方

```markdown
タスク: ログイン画面UI実装

【作業の分解】
1. コンポーネント作成: 1h
2. フォームロジック実装: 2h
3. バリデーション追加: 1h
4. スタイリング調整: 0.5h
5. テスト確認: 0.5h

【見積合計】5h
【バッファ(20%)】+1h
【最終見積】6h
```

**ポイント**:
- タスクを細かく分解
- 各作業の時間を見積もる
- バッファ(20-30%)を加える
- 初心者は1.5倍で見積もる

### 実績記録のコツ

**良い記録**:
```
✅ ログイン画面UI実装
- 見積: 6h
- 実績: 7.5h
- 差分: +1.5h
- 理由: CSSでのレイアウト調整に想定以上に時間がかかった
- 学び: Flexboxの理解を深める必要がある
```

**悪い記録**:
```
✅ ログイン画面実装
- だいたい6時間くらい
```

---

## 📈 週次振り返りテンプレート

```markdown
## 週次振り返り 2025/10/14-10/18

### 今週の時間分析
| 作業種別 | 見積 | 実績 | 差分 |
|---------|-----|-----|-----|
| 実装作業 | 20h | 24h | +4h |
| レビュー対応 | 5h | 6h | +1h |
| 会議 | 5h | 5h | ±0h |
| 学習 | 3h | 2h | -1h |
| **合計** | **33h** | **37h** | **+4h** |

### 見積精度の分析
- 実装タスクで時間超過が多い
- 原因: CSS調整、エラーハンドリングに予想以上の時間
- 改善: 次週から実装タスクは1.3倍で見積もる

### よくできたこと
- 毎日の日報を欠かさず投稿
- 困った時にすぐ相談できた
- PR3件マージ完了

### 改善すべきこと
- 見積もりの精度を上げる
- 午前中の集中力を活かす
- テストコードを後回しにしない

### 来週の目標
- 見積精度を80%以上にする
- 新機能1つを完遂する
- コードレビューで学んだことをメモする
```

---

## 🚀 効率化Tips

### 集中力を保つ方法

**ポモドーロテクニック**:
```
25分作業 → 5分休憩 → 25分作業 → 5分休憩
→ 4セット後に15-30分の長い休憩
```

**タイムボックス**:
```
10:00-12:00 [メイン] API実装
13:00-15:00 [サブ] テスト作成
15:00-17:00 [調整枠] レビュー対応・突発対応
```

### 割り込みタスクの対処法

**即対応(15分以内)**:
- 簡単な質問への回答
- 緊急度の高い確認事項

**後回し(予定に組み込む)**:
- レビュー依頼
- 重要だが緊急でない相談
- 新規タスク

**記録しておく**:
```markdown
## 割り込みタスク記録
- 14:30 ○○さんからレビュー依頼 → 16:00に対応予定
- 15:00 バグ報告 → 緊急度低、明日対応
```

---

## ✅ このシートの使い方

1. **朝**: 朝会テンプレートを埋めて報告
2. **午前**: タスク管理表で進捗を記録
3. **15時**: 中間確認でセルフチェック
4. **夕方**: 退勤前チェックリストで締め
5. **週末**: 週次振り返りで改善点を洗い出し

**印刷して手元に置いておくと便利！**
