import os
from pathlib import Path
import re

def natural_sort_key(path):
    """数字を考慮した自然順ソート用のキー"""
    parts = re.split(r'(\d+)', str(path))
    return [int(part) if part.isdigit() else part.lower() for part in parts]

def collect_all_files(directory):
    output_file = "全ファイルまとめ.txt"
    base_path = Path(directory)
    
    with open(output_file, 'w', encoding='utf-8') as out:
        out.write("=" * 80 + "\n")
        out.write("ディレクトリ構造\n")
        out.write("=" * 80 + "\n\n")
        
        # フォルダを数字順にソート
        folders = sorted([f for f in base_path.iterdir() if f.is_dir()], key=natural_sort_key)
        
        for folder in folders:
            out.write(f"📁 {folder.name}/\n")
            files = sorted([f for f in folder.rglob('*') if f.is_file()], key=natural_sort_key)
            for file in files:
                relative = file.relative_to(folder)
                indent = '  ' * (len(relative.parts) - 1)
                out.write(f'  {indent}📄 {relative}\n')
            out.write('\n')
        
        out.write("\n")
        out.write("=" * 80 + "\n")
        out.write("ファイル内容\n")
        out.write("=" * 80 + "\n\n")
        
        # フォルダごとに数字順に処理
        for folder in folders:
            out.write(f"\n{'#'*80}\n")
            out.write(f"### {folder.name} ###\n")
            out.write(f"{'#'*80}\n\n")
            
            files = sorted([f for f in folder.rglob('*') if f.is_file()], key=natural_sort_key)
            
            for file_path in files:
                relative_path = file_path.relative_to(base_path)
                
                out.write(f"\n{'='*80}\n")
                out.write(f"📄 ファイル: {relative_path}\n")
                out.write(f"{'='*80}\n\n")
                
                try:
                    with open(file_path, 'r', encoding='utf-8') as f:
                        content = f.read()
                        out.write(content)
                        out.write("\n\n")
                except UnicodeDecodeError:
                    try:
                        with open(file_path, 'r', encoding='shift-jis') as f:
                            content = f.read()
                            out.write(content)
                            out.write("\n\n")
                    except Exception as e:
                        out.write(f"[読み込みエラー: {e}]\n\n")
                except Exception as e:
                    out.write(f"[読み込みエラー: {e}]\n\n")
        
        # 統計情報
        total_files = sum(1 for _ in base_path.rglob('*') if _.is_file())
        total_folders = len(folders)
        
        out.write(f"\n{'='*80}\n")
        out.write(f"統計: フォルダ数 {total_folders}個、ファイル数 {total_files}個\n")
        out.write(f"{'='*80}\n")
    
    print(f"✅ 完了! {output_file} に出力しました")
    print(f"📊 フォルダ数: {total_folders}個、ファイル数: {total_files}個")

# 実行
collect_all_files(r"C:\Users\yukik\Desktop\python_programming")

