キーワードやクリエイターで検索


40
メニュー
 投稿

あなただけに表示されています
見出し画像を設定してみませんか?
見出し画像があると、もっと作品のイメージが伝わります！
かんたんにオリジナル画像を作ったり、他のクリエイターが提供した画像から選んだりすることもできます。
ぜひ活用してみましょう！


新人エンジニア向けのオンボーディング教材備忘録いろいろ　＃AI駆動学習

YUKIKO@BI＆AIを極めたい（転職活動中スカウト歓迎）
YUKIKO@BI＆AIを極めたい（転職活動中スカウト歓迎）
2025年10月18日 07:35

# 新人エンジニア向けオンボーディング - テック版

## 目次
1. [開発環境セットアップ](#開発環境セットアップ)
2. [Gitブランチ運用](#gitブランチ運用)
3. [レビュー依頼手順](#レビュー依頼手順)
4. [開発フロー](#開発フロー)
5. [コーディング規約](#コーディング規約)

---

## 開発環境セットアップ

### 1. 必須ツールのインストール

#### Git
```bash
# macOS
brew install git

# Windows
# https://git-scm.com/ からインストーラーをダウンロード

# 確認
git --version
```

#### Node.js / npm (プロジェクトに応じて)
```bash
# macOS
brew install node

# Windows
# https://nodejs.org/ からLTS版をダウンロード

# 確認
node --version
npm --version
```

#### Docker
- Docker Desktop をインストール: https://www.docker.com/products/docker-desktop
- 起動確認: `docker --version`

#### IDE / エディタ
- Visual Studio Code 推奨
- 拡張機能:
  - ESLint / Prettier
  - GitLens
  - Docker
  - プロジェクト固有の拡張機能(チームに確認)

### 2. SSH鍵の設定

```bash
# SSH鍵生成
ssh-keygen -t ed25519 -C "your.email@company.com"

# 公開鍵をコピー
cat ~/.ssh/id_ed25519.pub

# GitHub/GitLabに公開鍵を登録
# Settings > SSH and GPG keys > New SSH key
```

### 3. リポジトリのクローン

```bash
# プロジェクトリポジトリをクローン
git clone git@github.com:company/project-name.git
cd project-name

# 依存関係のインストール
npm install  # または yarn install / pip install -r requirements.txt
```

### 4. 環境変数の設定

```bash
# .env.example をコピー
cp .env.example .env

# 必要な環境変数を設定(チームメンバーに確認)
# API_KEY=xxx
# DATABASE_URL=xxx
```

### 5. ローカル環境の起動

```bash
# Docker使用の場合
docker-compose up -d

# アプリケーション起動
npm run dev  # または yarn dev

# ブラウザで確認
# http://localhost:3000
```

---

## Gitブランチ運用

### ブランチ戦略

```
main (本番環境)
  ↑
develop (開発環境)
  ↑
feature/xxx (機能開発)
hotfix/xxx (緊急修正)
```

### ブランチ命名規則

- **機能開発**: `feature/チケット番号-簡潔な説明`
  - 例: `feature/PROJ-123-add-login-form`
- **バグ修正**: `fix/チケット番号-簡潔な説明`
  - 例: `fix/PROJ-456-correct-validation-error`
- **緊急修正**: `hotfix/チケット番号-簡潔な説明`
  - 例: `hotfix/PROJ-789-critical-security-patch`

### 基本的なGitフロー

```bash
# 1. 最新のdevelopブランチを取得
git checkout develop
git pull origin develop

# 2. 新しいfeatureブランチを作成
git checkout -b feature/PROJ-123-add-login-form

# 3. 開発作業を行う
# ファイルを編集...

# 4. 変更をステージング
git add .
# または特定のファイルのみ
git add src/components/LoginForm.tsx

# 5. コミット
git commit -m "feat: ログインフォームのUIを実装"

# 6. リモートにプッシュ
git push origin feature/PROJ-123-add-login-form
```

### コミットメッセージ規約

**フォーマット**: `タイプ: 説明`

**タイプ一覧**:
- `feat`: 新機能
- `fix`: バグ修正
- `docs`: ドキュメント変更
- `style`: コードフォーマット(機能に影響なし)
- `refactor`: リファクタリング
- `test`: テスト追加・修正
- `chore`: ビルドプロセスやツールの変更

**例**:
```
feat: ユーザー登録APIを実装
fix: バリデーションエラーの表示を修正
docs: READMEにセットアップ手順を追加
refactor: 認証ロジックを共通化
```

### よく使うGitコマンド

```bash
# 現在の状態を確認
git status

# 変更差分を確認
git diff

# コミット履歴を確認
git log --oneline

# ブランチ一覧
git branch -a

# ブランチの切り替え
git checkout ブランチ名

# developの最新を取り込む(rebase)
git fetch origin
git rebase origin/develop

# コンフリクト解決後
git add .
git rebase --continue

# 直前のコミットを修正
git commit --amend

# 変更を一時退避
git stash
git stash pop
```

---

## レビュー依頼手順

### 1. プルリクエスト作成前のチェック

- [ ] コードが正常に動作することを確認
- [ ] テストが全て通ることを確認
- [ ] リント/フォーマッターを実行
- [ ] 不要なコメントやconsole.logを削除
- [ ] developブランチの最新を取り込み済み

```bash
# テスト実行
npm test

# リント実行
npm run lint

# フォーマット
npm run format
```

### 2. プルリクエストの作成

#### タイトル
`[チケット番号] 簡潔な説明`

例: `[PROJ-123] ログインフォームのUI実装`

#### 説明テンプレート

```markdown
## 概要
このPRで実装した機能や修正内容を簡潔に説明

## 対応チケット
- PROJ-123

## 変更内容
- ログインフォームコンポーネントを作成
- バリデーションロジックを実装
- エラーメッセージ表示機能を追加

## 動作確認方法
1. ローカル環境を起動
2. `/login` にアクセス
3. 不正な入力でエラーが表示されることを確認
4. 正しい入力でログインできることを確認

## スクリーンショット
(必要に応じて画面キャプチャを添付)

## レビュー時の確認ポイント
- バリデーションの実装方法
- エラーハンドリングの妥当性

## その他
特になし
```

### 3. レビュワーの指定

- 最低1名のレビュワーを指定
- 大きな変更の場合は複数名に依頼
- フロントエンド/バックエンドなど専門性に応じて選択

### 4. レビュー中のやりとり

#### フィードバックへの対応
```bash
# レビュー指摘を修正
git add .
git commit -m "fix: レビュー指摘に対応 - バリデーションロジックを改善"
git push origin feature/PROJ-123-add-login-form
```

#### 質問への返信
- GitHubのコメント機能で丁寧に返信
- 不明点があればすぐに質問
- 議論が長引く場合は直接会話

### 5. マージ前の最終確認

- [ ] 全てのレビューコメントに対応済み
- [ ] Approve を取得
- [ ] CIが全てパス
- [ ] コンフリクトが解消済み

### 6. マージ

- Squash and Merge (プロジェクトのルールに従う)
- マージ後はローカルのブランチを削除

```bash
git checkout develop
git pull origin develop
git branch -d feature/PROJ-123-add-login-form
```

---

## 開発フロー

### 日々の開発サイクル

1. **朝**: Slackで日報を確認、タスクボードを確認
2. **開発開始**: developから最新を取得してブランチ作成
3. **実装**: こまめにコミット(1機能1コミット)
4. **セルフレビュー**: 自分で一度コードを見直す
5. **PR作成**: 説明を丁寧に書く
6. **レビュー待ち**: 次のタスクに着手or改善作業
7. **フィードバック対応**: 迅速に対応
8. **マージ**: 完了したタスクをクローズ

### 困ったときの対処法

#### エラーが解決できない場合
1. エラーメッセージを丁寧に読む
2. 公式ドキュメントを確認
3. 社内wikiやSlackで検索
4. チームメンバーに質問(30分悩んだら質問)

#### 質問する際のポイント
- 何を実現したいか
- 何を試したか
- 現在のエラーメッセージ
- 環境情報(OS, バージョンなど)

---

## コーディング規約

### 基本原則

1. **読みやすさを優先**: 他人が読むことを意識
2. **一貫性を保つ**: 既存コードのスタイルに合わせる
3. **DRY原則**: 重複を避ける
4. **YAGNI**: 必要になるまで実装しない
5. **早期リターン**: ネストを深くしない

### コードレビューでよく指摘される点

- マジックナンバーの使用(定数化する)
- 関数が長すぎる(1関数30行以内を目安)
- 変数名が不明瞭(省略しすぎない)
- エラーハンドリングの欠如
- コメントの不足(複雑なロジックには説明を)

### セキュリティ

- パスワードやAPIキーをコードに含めない
- `.env` ファイルは `.gitignore` に追加
- ユーザー入力は必ずバリデーション
- SQLインジェクション対策(ORMの使用)

---

## 参考リンク

- 社内Wiki: [URL]
- プロジェクトREADME: [URL]
- コーディング規約: [URL]
- 技術スタック: [URL]

---

**困ったときは遠慮なく質問してください！**
チーム全体でサポートします。

copy
# 新人エンジニア向けオンボーディング - 非テック版

## 目次
1. [勤怠管理](#勤怠管理)
2. [日報・週報の書き方](#日報週報の書き方)
3. [社内連絡の流れ](#社内連絡の流れ)
4. [会議・MTGのマナー](#会議mtgのマナー)
5. [休暇申請・各種手続き](#休暇申請各種手続き)

---

## 勤怠管理

### 勤怠システムの使い方

#### 出勤時
1. 勤怠システムにログイン
2. 「出勤」ボタンをクリック
3. Slackの #general または #times-自分の名前 で「おはようございます」と挨拶

#### 退勤時
1. 勤怠システムで「退勤」ボタンをクリック
2. Slackで「お疲れ様でした」と挨拶
3. 当日のタスク完了状況を簡単に報告

### 勤務時間

- **コアタイム**: 10:00〜15:00(フレックス制の場合)
- **標準勤務時間**: 9:00〜18:00(休憩1時間)
- **リモートワーク**: 事前申請が必要(チームカレンダーに記載)

### 遅刻・早退の連絡

#### 遅刻する場合
```
【連絡タイミング】できるだけ早く(遅くとも始業30分前)
【連絡先】Slackのチームチャンネル + 直属の上長にDM
【テンプレート】
おはようございます。
本日、〇〇のため◯時頃の出社となります。
ご迷惑をおかけしますが、よろしくお願いいたします。
```

#### 早退する場合
```
【連絡先】直属の上長 + チームチャンネル
【テンプレート】
お疲れ様です。
本日、体調不良のため◯時頃に早退させていただきます。
緊急の連絡がある場合は携帯電話にご連絡ください。
よろしくお願いいたします。
```

### 欠勤の連絡

```
【連絡タイミング】始業1時間前まで
【連絡先】直属の上長にDM + チームチャンネルで報告
【テンプレート】
おはようございます。
本日、体調不良のため欠勤させていただきます。
進行中のタスク:
- タスクA: レビュー待ち(影響なし)
- タスクB: 明日対応予定

ご迷惑をおかけしますが、よろしくお願いいたします。
```

---

## 日報・週報の書き方

### 日報(毎日)

**投稿先**: Slackの #times-自分の名前 または #日報チャンネル
**投稿時間**: 退勤前

#### テンプレート

```markdown
## 【日報】2025/10/18(金)

### 今日やったこと
- ログイン機能のフロントエンド実装(90%)
  - UIコンポーネント作成完了
  - バリデーション実装完了
  - API連携は明日対応予定
- コードレビュー対応(PR #123)
- チーム定例MTGに参加

### 明日やること
- ログイン機能のAPI連携
- ユニットテスト作成
- 週次振り返りMTG参加

### 学んだこと・気づき
- React HooksのuseEffectの依存配列の重要性を理解
- エラーハンドリングの実装パターンを学習

### 相談事項・困っていること
- 認証トークンの保存場所について(LocalStorage vs Cookie)
  →○○さんに相談予定

### 稼働時間
8h(9:00-18:00)
```

### 週報(毎週金曜)

**投稿先**: Slackの #週報チャンネル
**投稿時間**: 金曜の退勤前

#### テンプレート

```markdown
## 【週報】2025/10/14(月) 〜 10/18(金)

### 今週の成果
1. ログイン・ログアウト機能の実装完了
   - 工数: 3日
   - PR: #123, #124
2. ユーザー管理画面のUI改善
   - 工数: 2日
   - PR: #125

### 進行中のタスク
- ユーザー権限管理機能(60%完了)
  - 来週火曜完了予定

### 来週の予定
- ユーザー権限管理機能の完成
- パフォーマンス改善タスクに着手
- 新機能のキックオフMTGに参加

### 今週の学び・成長
- Reactのパフォーマンス最適化手法を学習
- コードレビューで指摘された設計の改善点を理解
- チーム開発でのコミュニケーションの重要性を実感

### 課題・相談
- TypeScriptの型定義の複雑な部分で時間がかかった
  →来週、勉強会で質問したい

### 稼働時間
40h(週5日 × 8h)
```

### 報告のポイント

✅ **良い例**:
- 具体的な成果を数値や完成度で示す
- 困っている点を明確に書く
- 次のアクションが見える

❌ **避けるべき例**:
- 「いろいろやりました」など曖昧な表現
- 「頑張りました」など主観的な表現のみ
- 何も書かない日がある

---

## 社内連絡の流れ

### Slackの基本的な使い方

#### チャンネルの種類と使い分け

| チャンネル名 | 用途 | 投稿タイミング |
|------------|------|--------------|
| #general | 全社向け連絡 | 全員に知らせたいこと |
| #tech-team | 技術チーム全体 | 技術的な相談・共有 |
| #random | 雑談 | 業務外の話題 |
| #times-your_name | 個人日報 | 日々の作業記録 |
| #質問 | 質問全般 | わからないことの相談 |
| #プロジェクト名 | プロジェクト固有 | タスク進捗・相談 |

#### メッセージの書き方

**良い質問の例**:
```
お疲れ様です。
ログイン機能の実装で相談があります。

【やりたいこと】
セッション情報をLocalStorageに保存したい

【試したこと】
- setItem()でトークンを保存
- getItem()で取得を試みたが、ページリロード後に消える

【エラーメッセージ】
(エラーがあれば記載)

【環境】
- ブラウザ: Chrome 118
- React 18.2

お手すきの際にアドバイスいただけますと幸いです。
```

**悪い質問の例**:
```
ログインできないです。助けてください。
```

### 通知のマナー

#### @メンションの使い分け

- **@channel**: 全員に通知(緊急時のみ使用)
- **@here**: オンラインの人に通知(重要な連絡)
- **@username**: 特定の人に通知(通常使用)

#### 返信のマナー

- スレッドで返信(チャンネルを汚さない)
- 絵文字リアクションで確認(👍 ✅ 👀)
- 24時間以内に返信を心がける

### メールでの連絡

#### 社外メールのテンプレート

```
件名: 【社名】〇〇の件についてのご確認

△△株式会社
□□様

いつもお世話になっております。
株式会社◯◯の山田太郎です。

〇〇の件についてご連絡いたします。

【本文】

ご確認のほど、よろしくお願いいたします。

---
山田太郎
株式会社◯◯ 開発部
Email: taro.yamada@company.com
Tel: 03-XXXX-XXXX
```

---

## 会議・MTGのマナー

### 定例MTG

#### 朝会(デイリースタンドアップ)
- **頻度**: 毎日 10:00〜10:15
- **話すこと**:
  1. 昨日やったこと
  2. 今日やること
  3. 困っていること(ブロッカー)
- **ポイント**: 簡潔に(1人1〜2分)

#### 週次MTG
- **頻度**: 毎週月曜 10:00〜11:00
- **内容**: 先週の振り返り、今週の計画
- **準備**: 事前に週報を投稿

### MTGの基本マナー

#### 参加前
- [ ] カレンダー招待を承諾
- [ ] アジェンダを確認
- [ ] 必要な資料を準備
- [ ] 5分前には参加

#### MTG中
- [ ] カメラON(推奨)
- [ ] ミュート(話すとき以外)
- [ ] メモを取る
- [ ] 積極的に発言(わからないことは質問)

#### MTG後
- [ ] 議事録を確認
- [ ] アクションアイテムをタスク化
- [ ] 期日を設定

### オンラインMTGのツール

- **Zoom / Google Meet**: ビデオ会議
- **Slack Huddle**: 軽い相談(音声のみ)
- **Miro / Figma**: ホワイトボード

---

## 休暇申請・各種手続き

### 有給休暇の申請

#### 手順
1. **2週間前**: 上長に口頭で相談
2. **1週間前**: 勤怠システムで申請
3. **承認後**: チームカレンダーに登録
4. **前日**: タスクの引き継ぎ確認

#### Slackでの事前連絡
```
お疲れ様です。
◯月◯日(◯)に有給休暇を取得したいと考えております。
進行中のタスクは前日までに完了予定です。
ご確認のほど、よろしくお願いいたします。
```

### リモートワークの申請

#### 手順
1. **前日まで**: 上長に相談
2. **当日**: チームカレンダーに「🏠リモート」と記載
3. **Slack**: ステータスを「🏠リモートワーク中」に変更

### 各種申請

| 申請内容 | 申請先 | 期限 |
|---------|-------|-----|
| 住所変更 | 人事部 | 変更後2週間以内 |
| 通勤経路変更 | 人事部 | 事前申請 |
| 慶弔休暇 | 直属の上長 | 速やかに |
| 健康診断 | 人事部 | 指定期日まで |

---

## 社内ツール一覧

| ツール名 | 用途 | ログイン方法 |
|---------|------|------------|
| Slack | コミュニケーション | SSO |
| GitHub/GitLab | コード管理 | SSH鍵 |
| Jira/Notion | タスク管理 | SSO |
| Zoom | ビデオ会議 | SSO |
| Google Workspace | メール・ドキュメント | SSO |
| 勤怠システム | 勤怠管理 | ID/PW |

---

## よくある質問(FAQ)

### Q1: 体調不良で突然休むことになったら?
**A**: すぐに上長にSlack DMで連絡。進行中のタスクの状況も併せて報告。

### Q2: わからないことがあるけど、質問していい?
**A**: もちろん! 30分悩んだら遠慮せず質問してください。

### Q3: 定時で帰っていい?
**A**: はい。ただし、緊急タスクや締め切り前は柔軟に対応。

### Q4: ランチは誰と行けばいい?
**A**: 誰と行ってもOK。先輩に声をかけて一緒に行くのもおすすめ。

### Q5: 服装は?
**A**: ビジネスカジュアル。客先訪問時はスーツ(事前に確認)。

---

## 困ったときの連絡先

- **技術的な質問**: Slack #質問チャンネル
- **タスクの相談**: 直属の上長
- **人事・総務**: 人事部(内線XXX)
- **IT機器のトラブル**: 情報システム部(内線XXX)
- **メンタルヘルス**: 産業医面談(人事部経由)

---

**初めてのことばかりで大変だと思いますが、  
チーム全員でサポートしますので安心してください！**

copy
# Slack用語集 - 新人エンジニア向け

## 基本用語

### チャンネル (Channel)
複数人でメッセージをやり取りする場所。プロジェクトやトピックごとに作成される。

**種類**:
- **パブリックチャンネル** (#で始まる): 誰でも参加・閲覧可能
- **プライベートチャンネル** (🔒で表示): 招待された人のみ参加可能

**例**:
- `#general` - 全社向け連絡
- `#tech-team` - 技術チーム用
- `#random` - 雑談用

---

### ダイレクトメッセージ (DM)
1対1、または少人数でのプライベートなメッセージ。

**使い分け**:
- 個人的な相談 → DM
- チーム全体に関わること → チャンネル

---

### スレッド (Thread)
メッセージへの返信をまとめる機能。チャンネルを見やすく保つために使う。

**使い方**:
1. メッセージにマウスオーバー
2. 「スレッドで返信」をクリック
3. 返信を入力

💡 **ポイント**: スレッドで返信することで、チャンネルが雑然とするのを防げる

---

### メンション (@)
特定の人やグループに通知を送る機能。

#### 種類

| メンション | 意味 | 使うタイミング |
|-----------|------|--------------|
| `@channel` | チャンネル全員に通知 | 🚨 緊急時のみ |
| `@here` | オンラインの人に通知 | 重要だが緊急ではない |
| `@everyone` | ワークスペース全員 | ⚠️ 滅多に使わない |
| `@username` | 特定の個人に通知 | 通常の連絡 |

**例**:
```
@taro.yamada レビューお願いします！
```

---

### リアクション (Reaction)
絵文字でメッセージに反応する機能。返信不要な確認に便利。

**よく使われる絵文字**:
- 👍 - 了解、賛成
- ✅ - 完了、確認済み
- 👀 - 見てます、確認中

copy
# エンジニアカンファレンス参加チートシート

## 📅 事前準備(2週間前〜)

### 参加申請
- [ ] 上長に参加の相談・承認
- [ ] 経費申請の確認(交通費・宿泊費・参加費)
- [ ] カレンダーに予定をブロック
- [ ] チームに不在を連絡(Slackで告知)

### チケット購入
- [ ] 早割チケットの確認
- [ ] 領収書の発行設定
- [ ] 申込完了メールの保存

### 事前情報収集
- [ ] 公式サイトでタイムテーブル確認
- [ ] セッション一覧をチェック
- [ ] 聞きたいセッションをリストアップ
- [ ] スピーカーの情報を調査
- [ ] ハッシュタグの確認(#カンファレンス名)

### 宿泊・交通手配
- [ ] 新幹線・飛行機の予約
- [ ] ホテルの予約(前日入り推奨)
- [ ] 会場までのアクセス確認
- [ ] 会場周辺の飲食店チェック

---

## 🎒 持ち物チェックリスト

### 必須
- [ ] チケット(スマホ画面 or 印刷)
- [ ] 名刺(30枚程度)
- [ ] 名刺入れ
- [ ] スマートフォン
- [ ] モバイルバッテリー
- [ ] 充電ケーブル
- [ ] ノートPC(ハンズオンがある場合)
- [ ] 筆記用具・メモ帳
- [ ] 身分証明書

### あると便利
- [ ] イヤホン
- [ ] ペットボトル(水分補給)
- [ ] ティッシュ・ハンカチ
- [ ] 折りたたみ傘
- [ ] エコバッグ(ノベルティ用)
- [ ] マスク(予備)
- [ ] 常備薬

---

## 📋 当日のスケジュール例

### 開場〜開始前(9:00-9:30)
- [ ] 受付で参加証を受け取る
- [ ] 会場マップを確認
- [ ] Wi-Fi接続
- [ ] トイレの場所確認
- [ ] スポンサーブースを軽く巡回
- [ ] 座席確保(人気セッションは早めに)

### セッション中(9:30-18:00)
- [ ] メモを取る(重要ポイント・気づき)
- [ ] スライドを写真撮影(許可がある場合)
- [ ] Twitterでリアルタイム実況(#ハッシュタグ)
- [ ] 質問があればQ&Aタイムで発言

### ランチタイム(12:00-13:00)
- [ ] 他の参加者と交流
- [ ] 名刺交換
- [ ] スポンサーブース訪問
- [ ] ランチセッションがあれば参加

### 閉会後(18:00-)
- [ ] アフターパーティー参加(任意)
- [ ] スピーカーに挨拶・名刺交換
- [ ] 同僚・知人との情報交換
- [ ] 懇親会で人脈作り

---

## 💬 ネットワーキングのコツ

### 名刺交換の流れ
1. **挨拶**: 「こんにちは、◯◯と申します」
2. **名刺を渡す**: 両手で、相手が読める向きで
3. **名刺を受け取る**: 両手で受け取り、一言感想
4. **会話**: 「どのセッションが良かったですか?」
5. **お礼**: 「ありがとうございました」

### 話しかけるフレーズ
- 「◯◯さんのセッション、とても勉強になりました」
- 「どのセッションが印象に残りましたか?」
- 「普段はどんな技術を使われていますか?」
- 「お名刺交換させていただけますか?」
- 「よろしければ連絡先を交換しませんか?」

### SNSでの繋がり方
- TwitterやLinkedInのアカウントを聞く
- 名刺にSNSアカウントを記載しておく
- 後日、フォロー＋挨拶メッセージ

### 避けるべき行動
- ❌ 一方的に話し続ける
- ❌ 売り込みばかりする
- ❌ 相手の話を遮る
- ❌ スマホばかり見る
- ❌ 名刺を雑に扱う

---

## 📝 メモの取り方

### セッション中のメモテンプレート

```markdown
## セッション名: [タイトル]
- スピーカー: [名前]
- 時間: [HH:MM]
- 資料: [URL]

### 重要ポイント
- 
- 
- 

### 新しく知ったこと
- 
- 

### 業務で活かせそうなこと
- 
- 

### 気になった技術・ツール
- 
- 

### 質問・疑問点
- 
- 

### アクションアイテム
- [ ] 
- [ ] 
```

### 効率的なメモのコツ
1. **キーワードだけメモ**: 全文書かない
2. **写真を活用**: スライドは写真で残す(許可がある場合)
3. **色分け**: 重要度で色を変える
4. **記号を使う**: ★重要 ！要確認 ?質問
5. **後で清書**: 当日中に見直して整理

---

## 📱 SNS活用術

### Twitterでの実況

#### 基本フォーマット
```
[セッション名] by @スピーカー名
・学んだこと1
・学んだこと2
・学んだこと3
#カンファレンス名 #ハッシュタグ
```

#### 投稿のポイント
- ハッシュタグは必ず付ける
- スピーカーをメンション(@username)
- 引用は正確に(誤解を招かない)
- ネガティブな内容は避ける
- 写真撮影OKか確認してから投稿

#### よく使われるハッシュタグ
- `#技術カンファレンス名` (メインタグ)
- `#登壇者名`
- `#勉強になった`
- `#エンジニアと繋がりたい`

### ブログ記事作成(帰社後)
- カンファレンス全体の感想
- 印象に残ったセッション
- 学んだことと業務への活かし方
- 写真やスライド(許可を得て)
- 次回参加への推奨

---

## 🎯 セッション選びのコツ

### 優先順位の付け方

#### 1. 業務に直結するもの
現在のプロジェクトで使える技術・ノウハウ

#### 2. 興味があるが詳しくない分野
新しい知識を広げるチャンス

#### 3. 著名なスピーカー
業界のトップエンジニアから学ぶ

#### 4. トレンド技術
最新技術のキャッチアップ

### タイムテーブルの組み方
```
09:30-10:00 キーノート(全員参加)
10:15-11:00 [Track A] 業務関連セッション
11:15-12:00 [Track B] 興味ある新技術
12:00-13:00 ランチ＋スポンサーブース
13:00-13:45 [Track A] 設計・アーキテクチャ
14:00-14:45 [休憩] コーヒーブレイク
15:00-15:45 [Track C] LT大会
16:00-16:45 [Track A] パフォーマンス最適化
17:00-18:00 クロージング
```

### 複数トラックがある場合
- 事前に優先度を決める
- 同時刻の人気セッションは録画を確認
- 途中退出可能か事前確認
- ハンズオンは時間確保が必要

---

## 🏢 スポンサーブース活動

### 訪問すべきブース
- [ ] 使用中の技術・サービスの企業
- [ ] 興味がある企業
- [ ] 採用情報をチェックしたい企業
- [ ] ノベルティが魅力的な企業

### ブースでの会話例
```
「こ

copy
#質問
#ハッシュタグ
#tech
#123
#124
#125
#General
#random
#Times
#プロジェクト名
#日報チャンネル
#週報チャンネル
#質問チャンネル
すべてのタグを表示





YUKIKO@BI＆AIを極めたい（転職活動中スカウト歓迎）
YUKIKO@BI＆AIを極めたい（転職活動中スカウト歓迎）
生成AIパスポート試験合格に向けて学習中！
Python3エンジニア認定試験合格
2025年7月：BIの学習中です！

【技術】
Python/Django/スクレイピング/業務自動化







noteプレミアム
note pro
よくある質問・noteの使い方
プライバシー
クリエイターへのお問い合わせ
フィードバック
ご利用規約
通常ポイント利用特約
加盟店規約
資⾦決済法に基づく表⽰
特商法表記
投資情報の免責事項
新人エンジニア向けのオンボーディング教材備忘録いろいろ　＃AI駆動学習｜YUKIKO@BI＆AIを極めたい（転職活動中スカウト歓迎）
