# Python開発完全チートシート 🐍

優れたPythonエンジニアとして、あなたをサポートします!

## 📋 目次
1. [設計から実装への流れ](#設計から実装)
2. [文章からPythonコード化](#文章からコード)
3. [UML/クラス図からPython実装](#umlから実装)
4. [悩んだときの解決フロー](#問題解決)
5. [よくある相談と考え方](#相談事例)

---

## 🎯 設計から実装への流れ {#設計から実装}

### ステップ1: 要件整理
```python
# 何を作るか明確にする
"""
- 目的: 何のために作るのか
- 入力: どんなデータを受け取るか
- 処理: 何をするか
- 出力: 何を返すか
"""
```

### ステップ2: クラス設計の基本
```python
class クラス名:
    """クラスの説明"""
    
    def __init__(self, 引数):
        """初期化処理"""
        self.属性 = 引数
    
    def メソッド名(self, 引数):
        """処理の説明"""
        return 結果
```

### ステップ3: 設計原則
- **単一責任の原則**: 1つのクラスは1つの責任
- **DRY原則**: 同じコードを繰り返さない
- **KISS原則**: シンプルに保つ

---

## 📝 文章からPythonコード化 {#文章からコード}

### パターン1: 手順書をコードに
**文章例**: 「ユーザー名とパスワードを受け取り、データベースで確認して、正しければトークンを返す」

```python
def authenticate_user(username: str, password: str) -> str | None:
    """
    ユーザー認証を行う
    
    Args:
        username: ユーザー名
        password: パスワード
    
    Returns:
        認証トークン、失敗時はNone
    """
    # 1. データベースでユーザーを検索
    user = database.find_user(username)
    
    # 2. パスワードを確認
    if user and user.verify_password(password):
        # 3. トークンを生成して返す
        return generate_token(user.id)
    
    return None
```

### パターン2: ビジネスルールをコードに
**文章例**: 「商品価格が10000円以上なら送料無料、未満なら500円」

```python
def calculate_shipping_fee(price: int) -> int:
    """送料を計算する"""
    FREE_SHIPPING_THRESHOLD = 10000
    STANDARD_SHIPPING_FEE = 500
    
    return 0 if price >= FREE_SHIPPING_THRESHOLD else STANDARD_SHIPPING_FEE
```

---

## 🏗️ UML/クラス図からPython実装 {#umlから実装}

### クラス図の読み方と実装

#### 例: ECサイトのクラス図
```
[User]
- user_id: int
- name: str
- email: str
+ register()
+ login()

[Order]
- order_id: int
- user: User
- items: List[Item]
+ add_item()
+ calculate_total()

[Item]
- item_id: int
- name: str
- price: int
```

#### Python実装
```python
from dataclasses import dataclass
from typing import List

@dataclass
class User:
    """ユーザークラス"""
    user_id: int
    name: str
    email: str
    
    def register(self):
        """ユーザー登録処理"""
        pass
    
    def login(self):
        """ログイン処理"""
        pass


@dataclass
class Item:
    """商品クラス"""
    item_id: int
    name: str
    price: int


class Order:
    """注文クラス"""
    
    def __init__(self, order_id: int, user: User):
        self.order_id = order_id
        self.user = user
        self.items: List[Item] = []
    
    def add_item(self, item: Item):
        """商品を追加"""
        self.items.append(item)
    
    def calculate_total(self) -> int:
        """合計金額を計算"""
        return sum(item.price for item in self.items)
```

### 継承関係の実装
```python
class Animal:
    """基底クラス"""
    def __init__(self, name: str):
        self.name = name
    
    def speak(self):
        raise NotImplementedError


class Dog(Animal):
    """犬クラス(Animalを継承)"""
    def speak(self):
        return f"{self.name}「ワン!」"


class Cat(Animal):
    """猫クラス(Animalを継承)"""
    def speak(self):
        return f"{self.name}「ニャー!」"
```

---

## 🤔 悩んだときの解決フロー {#問題解決}

### レベル1: エラーが出た
```python
# ✅ チェックリスト
"""
1. エラーメッセージを最後まで読む
2. 行番号を確認
3. 変数名のスペルミスチェック
4. インデント(字下げ)を確認
5. 括弧の対応を確認
"""

# よくあるエラーと対処法
# NameError: 変数が定義されていない
# → 変数名を確認、定義を追加

# IndentationError: インデントが間違っている
# → スペース4つで統一

# TypeError: 型が合わない
# → 引数の型を確認
```

### レベル2: 期待通りに動かない
```python
# デバッグテクニック

# 1. print文で確認
def calculate(x, y):
    print(f"Debug: x={x}, y={y}")  # 値を確認
    result = x + y
    print(f"Debug: result={result}")  # 結果を確認
    return result

# 2. type()で型を確認
value = "123"
print(type(value))  # <class 'str'>

# 3. 小さく分割してテスト
# 大きな処理を小さな関数に分けて、1つずつ確認
```

### レベル3: 設計に悩む
```python
"""
質問リスト:
□ このクラス/関数は1つのことだけをしているか?
□ 名前を見て何をするかわかるか?
□ 他の人が読んでも理解できるか?
□ テストしやすいか?
□ 将来変更しやすいか?
"""

# 悩んだら、まずは動くものを作る
# → リファクタリングで改善
```

---

## 💬 よくある相談と考え方 {#相談事例}

### 相談1: 「クラスと関数、どちらを使うべきですか?」

**考え方:**
- **関数を使う**: 状態を持たない、単純な処理
- **クラスを使う**: 状態を持つ、関連する処理をまとめたい

```python
# 関数で十分な例
def calculate_tax(price: int) -> int:
    return int(price * 0.1)

# クラスが適切な例
class ShoppingCart:
    def __init__(self):
        self.items = []
    
    def add_item(self, item):
        self.items.append(item)
    
    def get_total(self):
        return sum(item.price for item in self.items)
```

### 相談2: 「変数名や関数名が思いつきません」

**命名のコツ:**
```python
# ❌ 悪い例
def f(x):
    return x * 2

# ✅ 良い例
def double_value(number: int) -> int:
    """数値を2倍にする"""
    return number * 2

# 命名パターン
# - 動詞 + 名詞: calculate_total, get_user, create_order
# - is/has + 形容詞: is_valid, has_permission
# - 複数形: users, items, orders
```

### 相談3: 「コードが長くなりすぎました」

**リファクタリングの手順:**
```python
# Before: 長い関数
def process_order(order_data):
    # 50行のコード...
    pass

# After: 分割した関数
def process_order(order_data):
    """注文を処理する"""
    validated_data = validate_order(order_data)
    saved_order = save_to_database(validated_data)
    send_confirmation_email(saved_order)
    return saved_order

def validate_order(data):
    """注文データを検証"""
    pass

def save_to_database(data):
    """データベースに保存"""
    pass

def send_confirmation_email(order):
    """確認メールを送信"""
    pass
```

### 相談4: 「エラー処理をどう書けばいいですか?」

```python
# パターン1: try-except
def divide(a: int, b: int) -> float:
    """安全な除算"""
    try:
        return a / b
    except ZeroDivisionError:
        print("エラー: 0で割ることはできません")
        return 0.0

# パターン2: 事前チェック
def divide_safe(a: int, b: int) -> float | None:
    """除算(0チェック付き)"""
    if b == 0:
        return None
    return a / b

# パターン3: カスタム例外
class InvalidOrderError(Exception):
    """無効な注文エラー"""
    pass

def create_order(items):
    if not items:
        raise InvalidOrderError("商品が選択されていません")
```

---

## 🎓 学習のコツ

### 毎日の習慣
```python
# 1. 小さなコードを書く(10分)
# 2. 他人のコードを読む(10分)
# 3. ドキュメントを読む(10分)
```

### 困ったときの魔法の言葉
```python
"""
1. 「まず動くものを作ろう」
2. 「小さく分割しよう」
3. 「print文で確認しよう」
4. 「わからないことは調べよう」
5. 「完璧じゃなくてもいい」
"""
```

---

## 📚 クイックリファレンス

### データ構造の選び方
```python
# リスト: 順序があり、変更可能
items = [1, 2, 3]

# タプル: 順序があり、変更不可
point = (10, 20)

# 辞書: キーと値のペア
user = {"name": "太郎", "age": 25}

# セット: 重複なし、順序なし
unique_ids = {1, 2, 3}
```

### よく使うパターン
```python
# リスト内包表記
squares = [x**2 for x in range(10)]

# 辞書内包表記
user_dict = {user.id: user.name for user in users}

# デコレータ
@property
def full_name(self):
    return f"{self.first_name} {self.last_name}"
```

---

**ご質問やお悩みがあれば、いつでもお気軽にご相談ください!** 🙌

具体的なコードの実装や設計について、詳しくサポートいたします。
